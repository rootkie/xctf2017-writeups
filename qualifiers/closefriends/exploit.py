


from Crypto.Util.number import *
from gmpy2 import *

def is_sqrt(number):
    x = number
    y = (x + number // x) // 2
    while y < x:
        x = y
        y = (x + number // x) // 2
    return x


def fermat(n, verbose=False):
    a = is_sqrt(n)
    b2 = a ** 2 - n
    b = isqrt(n)
    count = 0
    while b ** 2 != b2:
        if verbose:
            print('%s. Trying: a=%s b2=%s b=%s' % (count, a, b2, b))
        a += 1
        b2 = a ** 2 - n
        b = isqrt(b2)  
        count += 1
    p = a + b
    q = a - b
    assert n == p * q
    return p, q


def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient * x, x
        y, lasty = lasty - quotient * y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)


def modinv(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError
    return x % m


def crack(n, e, c, output_type='str'):
    p, q = fermat(n)
    phi = (p - 1) * (q - 1)
    d = modinv(e, phi)
    m = pow(c, d, n)
    if output_type == 'int':
        return m
    elif output_type == 'str':
        m = str(hex(m))[2:-1].decode("hex")
        return m
    elif output_type == 'hex':
        m = str(hex(m))[2:-1]
        return m


# Edit it, if you want

n = 19151832364469874030079656094177469433748168317755320937083072949573978228040151291544777245502236063196608461579489201369362004815030043733578487623213116649503871348963086291090121132194306262070995109705539538000008869402966894933057821601958692723598201827384122175994529811585728974124104295733428673867761671345961704704766770069587683530400081798456337677918440893303424838955850202397155334659914701913224625386643156011571498705176434274346135086264358439897875710724119577193830819539267082010339965367194293064883650735739542790736709672328177446419935753094706115100204402545192136431549117485099267273329
c = 13856751691370783634782646539158923978989309212516845580594517739524178211675149374207771880428923432662756145109269275116746054669737915883168919516891994386759407173353407285129849632732612836405168415117360620974230569349525403216399112819560791064818900387107601069076846202211837972422723015595593763213178529374267475564662278430111789325013021607370844312278701256369759034536276031219016112899698010680220395567056640888214017846277981539656803450412166412588991107727467348097720741899418399066657548330874326402875096187048577768762051434149161168814646583501927919837891266461653196134945092393368668463971
p,q = fermat(n)

print ("P:"+str(p))
print ("Q:"+str(q))

e = 65537
phi = (p - 1) * (q - 1)
d = invert(e,phi)
flag = powmod(c,d,n)

print (long_to_bytes(flag))